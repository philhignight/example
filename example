(function() {
    'use strict';

    // Configuration
    const CONFIG = {
        STORAGE_KEY: 'ai_chat_overlay_direct_data',
        HEARTBEAT_INTERVAL: 60000, // 60 seconds
        HEARTBEAT_MESSAGE: 'respond "k"',
        API_ENDPOINT: '/api/v1/chats/new' // Relative URL so browser handles auth
    };

    // Logging utility
    const Logger = {
        log: (category, message, data = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] ${message}`;
            console.log(logMessage, data || '');
        },
        error: (category, message, error = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] ERROR: ${message}`;
            console.error(logMessage, error || '');
        },
        warn: (category, message, data = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] WARNING: ${message}`;
            console.warn(logMessage, data || '');
        }
    };

    // Utility functions
    const Utils = {
        generateUUID: () => {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        },
        
        get13DigitTimestamp: () => {
            return Date.now();
        },
        
        get10DigitTimestamp: () => {
            return Math.floor(Date.now() / 1000);
        }
    };

    // Direct API Manager - No UI automation needed
    class DirectAPIManager {
        constructor() {
            Logger.log('DirectAPI', 'Initializing Direct API Manager');
            this.token = this.getAuthToken();
            this.isReady = !!this.token;
            
            if (this.token) {
                Logger.log('DirectAPI', 'Auth token found', { 
                    tokenPreview: this.token.substring(0, 20) + '...' 
                });
            } else {
                Logger.error('DirectAPI', 'No auth token found in localStorage');
            }
        }

        getAuthToken() {
            try {
                const token = localStorage.getItem('token');
                return token;
            } catch (e) {
                Logger.error('DirectAPI', 'Failed to retrieve auth token', e);
                return null;
            }
        }

        checkAuthToken() {
            const currentToken = this.getAuthToken();
            if (!currentToken) {
                this.isReady = false;
                return false;
            }
            
            if (currentToken !== this.token) {
                Logger.log('DirectAPI', 'Auth token updated');
                this.token = currentToken;
            }
            
            this.isReady = true;
            return true;
        }

        createPayload(userMessage, conversationHistory = []) {
            Logger.log('DirectAPI', 'Creating API payload', { 
                messageLength: userMessage.length,
                historyLength: conversationHistory.length
            });

            const timestamp13 = Utils.get13DigitTimestamp();
            const timestamp10 = Utils.get10DigitTimestamp();
            const messageId = Utils.generateUUID();
            
            // Create the message object
            const messageObj = {
                childrenIds: [],
                content: userMessage,
                id: messageId,
                models: ["Anthropic Claude 4 Sonnet"],
                parentId: null,
                role: "user",
                timestamp: timestamp10
            };
            
            // Start with current message
            const messages = [messageObj];
            
            // Add conversation history if provided
            conversationHistory.forEach(historyMsg => {
                const historyMsgId = Utils.generateUUID();
                messages.push({
                    childrenIds: [],
                    content: historyMsg.content,
                    id: historyMsgId,
                    models: ["Anthropic Claude 4 Sonnet"],
                    parentId: null,
                    role: historyMsg.role,
                    timestamp: timestamp10
                });
            });
            
            // Create history object with messages keyed by ID
            const historyMessages = {};
            messages.forEach(msg => {
                historyMessages[msg.id] = msg;
            });
            
            const payload = {
                chat: {
                    params: {},
                    tags: [],
                    timestamp: timestamp13,
                    title: "Chat Pending",
                    models: ["Anthropic Claude 4 Sonnet"],
                    messages: messages,
                    id: "",
                    history: {
                        currentId: messageId,
                        messages: historyMessages
                    }
                }
            };

            Logger.log('DirectAPI', 'Payload created successfully', {
                messageId,
                timestamp13,
                timestamp10
            });

            return payload;
        }

        async sendMessage(userMessage, conversationHistory = []) {
            Logger.log('DirectAPI', 'Sending direct API call', { 
                userMessage: userMessage.substring(0, 50) + '...'
            });

            // Check auth token before sending
            if (!this.checkAuthToken()) {
                throw new Error('No authentication token available. Please log in.');
            }

            try {
                const payload = this.createPayload(userMessage, conversationHistory);
                
                // Make direct API call with Bearer token
                const response = await fetch(CONFIG.API_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`
                    },
                    body: JSON.stringify(payload)
                });

                Logger.log('DirectAPI', 'API response received', { 
                    status: response.status,
                    statusText: response.statusText
                });

                if (response.status === 401) {
                    throw new Error('Authentication failed. Token may be expired.');
                } else if (response.status === 403) {
                    throw new Error('Access denied. Check your permissions.');
                } else if (!response.ok) {
                    throw new Error(`API call failed: ${response.status} ${response.statusText}`);
                }

                const responseData = await response.json();
                Logger.log('DirectAPI', 'Message sent successfully', responseData);

                return responseData;

            } catch (error) {
                Logger.error('DirectAPI', 'Failed to send message', error);
                throw error;
            }
        }
    }

    // Chat Management
    class ChatManager {
        constructor() {
            Logger.log('ChatManager', 'Initializing ChatManager');
            this.data = this.loadData();
        }

        loadData() {
            try {
                const stored = localStorage.getItem(CONFIG.STORAGE_KEY);
                return stored ? JSON.parse(stored) : { chats: [], currentChatId: null };
            } catch (e) {
                Logger.error('ChatManager', 'Failed to load chat data', e);
                return { chats: [], currentChatId: null };
            }
        }

        saveData() {
            try {
                localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(this.data));
            } catch (e) {
                Logger.error('ChatManager', 'Failed to save chat data', e);
            }
        }

        createNewChat() {
            const chatId = Date.now().toString();
            const chat = {
                id: chatId,
                timestamp: new Date().toLocaleString(),
                messages: []
            };
            this.data.chats.unshift(chat);
            this.data.currentChatId = chatId;
            this.saveData();
            Logger.log('ChatManager', 'New chat created', { chatId });
            return chat;
        }

        getCurrentChat() {
            if (!this.data.currentChatId) return null;
            return this.data.chats.find(chat => chat.id === this.data.currentChatId);
        }

        selectChat(chatId) {
            this.data.currentChatId = chatId;
            this.saveData();
        }

        addMessage(role, content) {
            const chat = this.getCurrentChat();
            if (chat) {
                chat.messages.push({ role, content, timestamp: Date.now() });
                this.saveData();
                Logger.log('ChatManager', 'Message added', { role });
            }
        }

        getConversationHistory() {
            const currentChat = this.getCurrentChat();
            if (!currentChat) return [];
            
            return currentChat.messages.map(msg => ({
                role: msg.role,
                content: msg.content
            }));
        }
    }

    // UI Creation
    function createDirectAPIUI() {
        const existing = document.getElementById('ai-chat-overlay-direct');
        if (existing) existing.remove();

        const overlay = document.createElement('div');
        overlay.id = 'ai-chat-overlay-direct';
        overlay.innerHTML = `
            <div class="chat-container">
                <div class="chat-header">
                    <h1>AI Chat (Direct API)</h1>
                    <div class="header-controls">
                        <button id="new-chat-direct" class="btn">New Chat</button>
                        <button id="close-overlay-direct" class="btn btn-danger">×</button>
                    </div>
                </div>
                
                <div class="chat-content">
                    <div class="sidebar">
                        <h3>Previous Chats</h3>
                        <div id="chat-list-direct" class="chat-list"></div>
                    </div>
                    
                    <div class="main-chat">
                        <div id="messages-direct" class="messages"></div>
                        <div class="input-area">
                            <textarea id="user-input-direct" placeholder="Type your message..." rows="3"></textarea>
                            <button id="send-btn-direct" class="btn btn-primary">Send</button>
                        </div>
                        <div id="status-direct" class="status">Ready - Direct API calls</div>
                    </div>
                </div>
            </div>
        `;

        // Add CSS styling
        const style = document.createElement('style');
        style.textContent = `
            #ai-chat-overlay-direct {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: #1a1a1a;
                color: #e0e0e0;
                font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                font-size: 14px;
                z-index: 9999;
                display: flex;
                flex-direction: column;
            }

            .chat-container {
                display: flex;
                flex-direction: column;
                height: 100%;
                max-width: 100%;
            }

            .chat-header {
                background: #2d2d2d;
                padding: 15px 20px;
                border-bottom: 1px solid #444;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .chat-header h1 {
                margin: 0;
                font-size: 18px;
                font-weight: normal;
            }

            .header-controls {
                display: flex;
                gap: 10px;
            }

            .chat-content {
                display: flex;
                flex: 1;
                overflow: hidden;
            }

            .sidebar {
                width: 250px;
                background: #252525;
                border-right: 1px solid #444;
                padding: 15px;
                overflow-y: auto;
            }

            .sidebar h3 {
                margin: 0 0 15px 0;
                font-size: 14px;
                font-weight: normal;
                color: #ccc;
            }

            .chat-list {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }

            .chat-item {
                padding: 8px 12px;
                background: #333;
                border: 1px solid #444;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                transition: background-color 0.2s;
            }

            .chat-item:hover {
                background: #3a3a3a;
            }

            .chat-item.active {
                background: #0d7377;
                border-color: #14a085;
            }

            .main-chat {
                flex: 1;
                display: flex;
                flex-direction: column;
                overflow: hidden;
            }

            .messages {
                flex: 1;
                overflow-y: auto;
                padding: 20px;
                display: flex;
                flex-direction: column;
                gap: 15px;
            }

            .message {
                max-width: 80%;
                padding: 12px 16px;
                border-radius: 8px;
                white-space: pre-wrap;
                word-wrap: break-word;
            }

            .message.user {
                align-self: flex-end;
                background: #0d7377;
                border: 1px solid #14a085;
            }

            .message.assistant {
                align-self: flex-start;
                background: #2d2d2d;
                border: 1px solid #444;
            }

            .input-area {
                padding: 15px 20px;
                background: #2d2d2d;
                border-top: 1px solid #444;
                display: flex;
                gap: 10px;
                align-items: flex-end;
            }

            #user-input-direct {
                flex: 1;
                background: #1a1a1a;
                border: 1px solid #444;
                border-radius: 4px;
                color: #e0e0e0;
                padding: 10px;
                font-family: inherit;
                font-size: inherit;
                resize: vertical;
                min-height: 60px;
            }

            #user-input-direct:focus {
                outline: none;
                border-color: #0d7377;
            }

            .btn {
                background: #333;
                border: 1px solid #444;
                color: #e0e0e0;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-family: inherit;
                font-size: inherit;
                transition: background-color 0.2s;
            }

            .btn:hover {
                background: #3a3a3a;
            }

            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .btn-primary {
                background: #0d7377;
                border-color: #14a085;
                height: fit-content;
            }

            .btn-primary:hover:not(:disabled) {
                background: #0a5d61;
            }

            .btn-danger {
                background: #d32f2f;
                border-color: #f44336;
            }

            .btn-danger:hover {
                background: #b71c1c;
            }

            .status {
                padding: 10px 20px;
                background: #2d2d2d;
                border-top: 1px solid #444;
                font-size: 12px;
                color: #aaa;
                min-height: 20px;
            }

            .status.processing {
                color: #ffa726;
            }

            .status.error {
                color: #f44336;
            }

            .status.success {
                color: #4caf50;
            }

            .status.ready {
                color: #4caf50;
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(overlay);

        return overlay;
    }

    // Main App
    class DirectAPIChatApp {
        constructor() {
            Logger.log('App', 'Initializing Direct API Chat App');
            this.apiManager = new DirectAPIManager();
            this.chatManager = new ChatManager();
            this.overlay = null;
            this.elements = {};
            this.lastActivityTime = Date.now();
            this.heartbeatTimer = null;
        }

        async init() {
            Logger.log('App', 'Starting initialization');
            
            // Create UI
            this.overlay = createDirectAPIUI();
            this.bindElements();
            this.bindEvents();
            
            // Check if we have authentication
            if (this.apiManager.isReady) {
                this.updateStatus('Ready - Direct API calls', 'ready');
                this.updateUI();
                this.startHeartbeat();
                Logger.log('App', 'Initialization complete');
            } else {
                this.updateStatus('Authentication required - No token found', 'error');
                this.updateUI();
                Logger.error('App', 'Initialization failed - no auth token');
            }
        }

        bindElements() {
            this.elements = {
                newChatBtn: document.getElementById('new-chat-direct'),
                closeBtn: document.getElementById('close-overlay-direct'),
                chatList: document.getElementById('chat-list-direct'),
                messages: document.getElementById('messages-direct'),
                userInput: document.getElementById('user-input-direct'),
                sendBtn: document.getElementById('send-btn-direct'),
                status: document.getElementById('status-direct')
            };
        }

        bindEvents() {
            this.elements.newChatBtn.addEventListener('click', () => {
                this.createNewChat();
            });

            this.elements.closeBtn.addEventListener('click', () => {
                this.close();
            });

            this.elements.sendBtn.addEventListener('click', () => {
                this.sendMessage();
            });

            this.elements.userInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }

        createNewChat() {
            this.chatManager.createNewChat();
            this.updateUI();
            this.elements.userInput.focus();
        }

        selectChat(chatId) {
            this.chatManager.selectChat(chatId);
            this.updateUI();
        }

        updateUI() {
            this.updateChatList();
            this.updateMessages();
        }

        updateChatList() {
            const chatList = this.elements.chatList;
            chatList.innerHTML = '';

            this.chatManager.data.chats.forEach(chat => {
                const item = document.createElement('div');
                item.className = 'chat-item';
                if (chat.id === this.chatManager.data.currentChatId) {
                    item.classList.add('active');
                }
                
                item.textContent = chat.timestamp;
                item.addEventListener('click', () => {
                    this.selectChat(chat.id);
                });
                
                chatList.appendChild(item);
            });
        }

        updateMessages() {
            const messages = this.elements.messages;
            messages.innerHTML = '';

            const currentChat = this.chatManager.getCurrentChat();
            if (!currentChat) return;

            currentChat.messages.forEach((msg) => {
                const messageEl = document.createElement('div');
                messageEl.className = `message ${msg.role}`;
                messageEl.textContent = msg.content;
                messages.appendChild(messageEl);
            });

            messages.scrollTop = messages.scrollHeight;
        }

        updateStatus(text, type = '') {
            this.elements.status.textContent = text;
            this.elements.status.className = `status ${type}`;
        }

        async sendMessage(isHeartbeat = false) {
            const input = this.elements.userInput;
            let message;
            
            // Check authentication before sending
            if (!this.apiManager.checkAuthToken()) {
                if (!isHeartbeat) {
                    this.updateStatus('Authentication required - No token found', 'error');
                }
                return;
            }
            
            if (isHeartbeat) {
                message = CONFIG.HEARTBEAT_MESSAGE;
                Logger.log('Heartbeat', 'Sending heartbeat message');
            } else {
                message = input.value.trim();
                if (!message) return;
                
                this.updateActivity();
            }

            if (!this.chatManager.getCurrentChat()) {
                this.createNewChat();
            }

            if (!isHeartbeat) {
                this.elements.sendBtn.disabled = true;
                input.disabled = true;
            }

            try {
                if (!isHeartbeat) {
                    this.chatManager.addMessage('user', message);
                    this.updateMessages();
                    input.value = '';
                    this.updateStatus('Sending message via direct API...', 'processing');
                }
                
                // Get conversation history for context
                const conversationHistory = isHeartbeat ? [] : this.chatManager.getConversationHistory().slice(0, -1); // Exclude the message we just added
                
                const response = await this.apiManager.sendMessage(message, conversationHistory);
                
                if (response) {
                    if (isHeartbeat) {
                        Logger.log('Heartbeat', 'Heartbeat sent successfully');
                    } else {
                        // TODO: Parse actual AI response from the API response
                        this.chatManager.addMessage('assistant', `Response received (ID: ${response.id || 'unknown'})`);
                        this.updateMessages();
                        this.updateStatus('Message sent successfully', 'success');
                    }
                } else {
                    if (!isHeartbeat) {
                        this.updateStatus('Failed to send message', 'error');
                    }
                }
                
            } catch (error) {
                if (!isHeartbeat) {
                    Logger.error('App', 'Failed to send message', error);
                    
                    // Check if it's an auth error and update UI accordingly
                    if (error.message.includes('Authentication') || error.message.includes('token')) {
                        this.updateStatus('Authentication error - Please refresh and log in', 'error');
                    } else {
                        this.updateStatus(`Error: ${error.message}`, 'error');
                    }
                } else {
                    Logger.error('Heartbeat', 'Heartbeat failed', error);
                }
            } finally {
                if (!isHeartbeat) {
                    this.elements.sendBtn.disabled = false;
                    input.disabled = false;
                    this.elements.userInput.focus();
                }
            }
        }

        updateActivity() {
            this.lastActivityTime = Date.now();
        }

        startHeartbeat() {
            Logger.log('Heartbeat', 'Starting heartbeat system');
            
            if (this.heartbeatTimer) {
                clearInterval(this.heartbeatTimer);
            }
            
            this.heartbeatTimer = setInterval(() => {
                const timeSinceActivity = Date.now() - this.lastActivityTime;
                
                if (timeSinceActivity >= CONFIG.HEARTBEAT_INTERVAL) {
                    Logger.log('Heartbeat', 'Sending heartbeat to keep session alive');
                    this.sendMessage(true);
                    this.updateActivity();
                }
            }, 10000);
        }

        stopHeartbeat() {
            if (this.heartbeatTimer) {
                clearInterval(this.heartbeatTimer);
                this.heartbeatTimer = null;
            }
        }

        close() {
            this.stopHeartbeat();
            if (this.overlay) {
                this.overlay.remove();
            }
        }
    }

    // Initialize the direct API app
    Logger.log('Main', 'Loading Direct API AI Chat Overlay');
    const app = new DirectAPIChatApp();
    app.init();

    window.aiChatOverlayDirect = app;

    Logger.log('Main', 'Direct API AI Chat Overlay loaded successfully');
    console.log('Direct API AI Chat Overlay loaded! Access via window.aiChatOverlayDirect');

})();
