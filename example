(function() {
    'use strict';

    // Page replacement will eliminate notification popups entirely
    
    // Override fetch to block requests not from our app
    function blockNonAppRequests() {
        const originalFetch = window.fetch;
        const APP_ENDPOINTS = [
            '/api/v1/chats/new',
            '/api/v1/chats/',
            '/api/chat/completions'
        ];
        
        window.fetch = function(url, options = {}) {
            // Check if this request is from our app
            const isAppRequest = APP_ENDPOINTS.some(endpoint => {
                if (typeof url === 'string') {
                    return url.includes(endpoint);
                } else if (url && url.href) {
                    return url.href.includes(endpoint);
                }
                return false;
            });
            
            if (isAppRequest) {
                Logger.log('FetchBlock', 'Allowing app request', { url: url.toString() });
                return originalFetch.call(this, url, options);
            } else {
                Logger.log('FetchBlock', 'Blocking non-app request', { url: url.toString() });
                // Return a rejected promise to block the request
                return Promise.reject(new Error('Request blocked: not from streaming chat app'));
            }
        };
        
        Logger.log('FetchBlock', 'Fetch blocking enabled - only app requests allowed');
    }
    
    // Configuration
    const CONFIG = {
        STORAGE_KEY: 'ai_chat_overlay_streaming_data',
        PROJECTS_KEY: 'ai_chat_projects',
        HEARTBEAT_INTERVAL: 60000, // 60 seconds
        HEARTBEAT_MESSAGE: 'respond "k"',
        OVERALL_TIMEOUT: 10 * 60 * 1000, // 10 minutes
        POLLING_INTERVAL: 1000, // 1 second
        SESSION_ID: '11111111111111111111', // 20 ones
        NEW_CHAT_ENDPOINT: '/api/v1/chats/new',
        GET_CHAT_ENDPOINT: '/api/v1/chats/',
        COMPLETIONS_ENDPOINT: '/api/chat/completions'
    };

    // Logging utility
    const Logger = {
        log: (category, message, data = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] ${message}`;
            console.log(logMessage, data || '');
        },
        error: (category, message, error = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] ERROR: ${message}`;
            console.error(logMessage, error || '');
        },
        warn: (category, message, data = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] WARNING: ${message}`;
            console.warn(logMessage, data || '');
        }
    };

    // Utility functions
    const Utils = {
        generateUUID: () => {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
                const r = Math.random() * 16 | 0;
                const v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        },
        
        get13DigitTimestamp: () => {
            return Date.now();
        },
        
        get10DigitTimestamp: () => {
            return Math.floor(Date.now() / 1000);
        }
    };

    // Streaming API Manager - 3-step flow
    class StreamingAPIManager {
        constructor() {
            Logger.log('StreamingAPI', 'Initializing Streaming API Manager');
            this.token = this.getAuthToken();
            this.isReady = !!this.token;
            this.activityTimeout = null;
            
            if (this.token) {
                Logger.log('StreamingAPI', 'Auth token found', { 
                    tokenPreview: this.token.substring(0, 20) + '...' 
                });
            } else {
                Logger.error('StreamingAPI', 'No auth token found in localStorage');
            }
        }

        getAuthToken() {
            try {
                const token = localStorage.getItem('token');
                return token;
            } catch (e) {
                Logger.error('StreamingAPI', 'Failed to retrieve auth token', e);
                return null;
            }
        }

        checkAuthToken() {
            const currentToken = this.getAuthToken();
            if (!currentToken) {
                this.isReady = false;
                return false;
            }
            
            if (currentToken !== this.token) {
                Logger.log('StreamingAPI', 'Auth token updated');
                this.token = currentToken;
            }
            
            this.isReady = true;
            return true;
        }

        resetActivityTimeout() {
            if (this.activityTimeout) {
                clearTimeout(this.activityTimeout);
            }
            
            this.activityTimeout = setTimeout(() => {
                Logger.error('StreamingAPI', 'Overall timeout reached - 10 minutes of no activity');
                throw new Error('Request timeout - 10 minutes of no activity');
            }, CONFIG.OVERALL_TIMEOUT);
        }

        clearActivityTimeout() {
            if (this.activityTimeout) {
                clearTimeout(this.activityTimeout);
                this.activityTimeout = null;
            }
        }

        createStep1Payload(userMessage, conversationHistory = []) {
            Logger.log('StreamingAPI', 'Creating Step 1 payload', { 
                messageLength: userMessage.length,
                historyLength: conversationHistory.length
            });

            const timestamp13 = Utils.get13DigitTimestamp();
            const timestamp10 = Utils.get10DigitTimestamp();
            
            // Build messages array with proper parent/child relationships
            const messages = [];
            let previousMessageId = null;
            
            // Add conversation history first
            conversationHistory.forEach((historyMsg, index) => {
                const historyMsgId = Utils.generateUUID();
                const message = {
                    childrenIds: [],
                    content: historyMsg.content,
                    id: historyMsgId,
                    models: ["Anthropic Claude 4 Sonnet"],
                    parentId: previousMessageId,
                    role: historyMsg.role,
                    timestamp: timestamp10
                };
                
                // Update previous message's childrenIds
                if (previousMessageId) {
                    const previousMessage = messages.find(msg => msg.id === previousMessageId);
                    if (previousMessage) {
                        previousMessage.childrenIds.push(historyMsgId);
                    }
                }
                
                messages.push(message);
                previousMessageId = historyMsgId;
            });
            
            // Add current user message
            const userMessageId = Utils.generateUUID();
            const userMessageObj = {
                childrenIds: [],
                content: userMessage,
                id: userMessageId,
                models: ["Anthropic Claude 4 Sonnet"],
                parentId: previousMessageId,
                role: "user",
                timestamp: timestamp10
            };
            
            // Update previous message's childrenIds
            if (previousMessageId) {
                const previousMessage = messages.find(msg => msg.id === previousMessageId);
                if (previousMessage) {
                    previousMessage.childrenIds.push(userMessageId);
                }
            }
            
            messages.push(userMessageObj);
            
            // Create history object with messages keyed by ID
            const historyMessages = {};
            messages.forEach(msg => {
                historyMessages[msg.id] = msg;
            });
            
            const payload = {
                chat: {
                    params: {},
                    tags: [],
                    timestamp: timestamp13,
                    title: "Chat Pending",
                    models: ["Anthropic Claude 4 Sonnet"],
                    messages: messages,
                    id: "",
                    history: {
                        currentId: userMessageId,
                        messages: historyMessages
                    }
                }
            };

            Logger.log('StreamingAPI', 'Step 1 payload created', { 
                userMessageId, 
                timestamp13,
                totalMessages: messages.length,
                parentChildChain: messages.map(m => ({ id: m.id, parentId: m.parentId, role: m.role }))
            });
            
            return payload;
        }

        async step1CreateConversation(userMessage, conversationHistory = []) {
            Logger.log('StreamingAPI', 'STEP 1: Creating conversation');
            
            if (!this.checkAuthToken()) {
                throw new Error('No authentication token available');
            }

            this.resetActivityTimeout();

            try {
                const payload = this.createStep1Payload(userMessage, conversationHistory);
                
                Logger.log('StreamingAPI', 'Sending Step 1 request', { 
                    endpoint: CONFIG.NEW_CHAT_ENDPOINT 
                });

                const response = await fetch(CONFIG.NEW_CHAT_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`
                    },
                    body: JSON.stringify(payload)
                });

                Logger.log('StreamingAPI', 'Step 1 response received', { 
                    status: response.status,
                    statusText: response.statusText
                });

                if (response.status === 401) {
                    throw new Error('Authentication failed. Token may be expired.');
                } else if (!response.ok) {
                    throw new Error(`Step 1 failed: ${response.status} ${response.statusText}`);
                }

                const responseData = await response.json();
                Logger.log('StreamingAPI', 'Step 1 successful', { 
                    conversationId: responseData.id,
                    userId: responseData.user_id || 'not provided'
                });

                return {
                    conversationId: responseData.id,
                    userId: responseData.user_id,
                    userMessageId: payload.chat.messages[payload.chat.messages.length - 1].id,
                    payload: payload
                };

            } catch (error) {
                this.clearActivityTimeout();
                Logger.error('StreamingAPI', 'Step 1 failed', error);
                throw error;
            }
        }

        async step2AddAssistantSlotToExistingConversation(conversationId, userMessage, conversationHistory) {
            Logger.log('StreamingAPI', 'STEP 2: Add assistant slot to existing conversation', { 
                conversationId,
                historyLength: conversationHistory.length
            });

            try {
                const assistantMessageId = Utils.generateUUID();
                const timestamp13 = Utils.get13DigitTimestamp();
                const timestamp10 = Utils.get10DigitTimestamp();
                
                // Build complete message chain including new user message
                const messages = [];
                const historyMessages = {};
                let previousMessageId = null;
                
                // Add all conversation history
                conversationHistory.forEach((historyMsg, index) => {
                    const msgId = Utils.generateUUID();
                    const message = {
                        childrenIds: [],
                        content: historyMsg.content,
                        id: msgId,
                        models: ["Anthropic Claude 4 Sonnet"],
                        parentId: previousMessageId,
                        role: historyMsg.role,
                        timestamp: timestamp10
                    };
                    
                    // Update previous message's childrenIds
                    if (previousMessageId && historyMessages[previousMessageId]) {
                        historyMessages[previousMessageId].childrenIds.push(msgId);
                    }
                    
                    messages.push(message);
                    historyMessages[msgId] = message;
                    previousMessageId = msgId;
                });
                
                // Add new user message
                const userMessageId = Utils.generateUUID();
                const userMessageObj = {
                    childrenIds: [],
                    content: userMessage,
                    id: userMessageId,
                    models: ["Anthropic Claude 4 Sonnet"],
                    parentId: previousMessageId,
                    role: "user",
                    timestamp: timestamp10
                };
                
                // Update previous message's childrenIds
                if (previousMessageId && historyMessages[previousMessageId]) {
                    historyMessages[previousMessageId].childrenIds.push(userMessageId);
                }
                
                messages.push(userMessageObj);
                historyMessages[userMessageId] = userMessageObj;
                
                // Add empty assistant message
                const assistantMessage = {
                    childrenIds: [],
                    content: "",
                    id: assistantMessageId,
                    models: ["Anthropic Claude 4 Sonnet"],
                    parentId: userMessageId,
                    role: "assistant",
                    timestamp: timestamp10
                };
                
                // Update user message's childrenIds
                userMessageObj.childrenIds.push(assistantMessageId);
                historyMessages[userMessageId].childrenIds.push(assistantMessageId);
                
                messages.push(assistantMessage);
                historyMessages[assistantMessageId] = assistantMessage;

                Logger.log('StreamingAPI', 'Built complete message chain for existing conversation', {
                    totalMessages: messages.length,
                    assistantMessageId,
                    userMessageId
                });

                // Build conversation structure
                const conversationData = {
                    archived: false,
                    chat: {
                        files: [],
                        history: {
                            currentId: assistantMessageId,
                            messages: historyMessages
                        },
                        id: conversationId,
                        messages: messages,
                        models: ["Anthropic Claude 4 Sonnet"],
                        params: {},
                        tags: [],
                        timestamp: timestamp13,
                        title: "Chat Pending"
                    },
                    created_at: timestamp10,
                    folder_id: null,
                    id: conversationId,
                    meta: {},
                    pinned: false,
                    share_id: null,
                    title: "Chat Pending",
                    updated_at: timestamp10,
                    user_id: null,
                    workspace_id: null,
                    workspace_name: null,
                    workspace_type: null
                };

                Logger.log('StreamingAPI', 'Step 2: Posting updated conversation', {
                    totalMessages: conversationData.chat.messages.length,
                    assistantMessageId
                });

                // POST the updated conversation
                const postResponse = await fetch(`${CONFIG.GET_CHAT_ENDPOINT}${conversationId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`
                    },
                    body: JSON.stringify(conversationData)
                });

                Logger.log('StreamingAPI', 'Step 2 response received', { 
                    status: postResponse.status
                });

                if (!postResponse.ok) {
                    throw new Error(`Step 2 failed: ${postResponse.status} ${postResponse.statusText}`);
                }

                const postResponseData = await postResponse.json();
                Logger.log('StreamingAPI', 'Step 2 complete - assistant message slot added to existing conversation', { 
                    assistantMessageId
                });

                return {
                    assistantMessageId: assistantMessageId,
                    conversationData: conversationData
                };

            } catch (error) {
                Logger.error('StreamingAPI', 'Step 2 (existing conversation) failed', error);
                throw error;
            }
        }

        async step2AddAssistantSlot(conversationId, step1Payload) {
            Logger.log('StreamingAPI', 'STEP 2: Add assistant message slot (skipping GET)', { 
                conversationId 
            });

            try {
                const assistantMessageId = Utils.generateUUID();
                const timestamp10 = Utils.get10DigitTimestamp();
                
                // Find the last message from Step 1 payload for parentId
                const messages = step1Payload.chat.messages || [];
                const lastMessage = messages[messages.length - 1];
                const parentId = lastMessage ? lastMessage.id : null;
                
                Logger.log('StreamingAPI', 'Creating assistant message from Step 1 data', {
                    assistantMessageId,
                    parentId,
                    timestamp10,
                    step1MessageCount: messages.length
                });

                // Create the empty assistant message
                const assistantMessage = {
                    childrenIds: [],
                    content: "",
                    id: assistantMessageId,
                    models: ["Anthropic Claude 4 Sonnet"],
                    parentId: parentId,
                    role: "assistant",
                    timestamp: timestamp10
                };

                // Build conversation structure based on Step 1 payload
                const conversationData = {
                    archived: false,
                    chat: {
                        files: [],
                        history: {
                            currentId: assistantMessageId,
                            messages: JSON.parse(JSON.stringify(step1Payload.chat.history.messages))
                        },
                        id: conversationId,
                        messages: [...step1Payload.chat.messages],
                        models: ["Anthropic Claude 4 Sonnet"],
                        params: {},
                        tags: [],
                        timestamp: step1Payload.chat.timestamp,
                        title: "Chat Pending"
                    },
                    created_at: timestamp10,
                    folder_id: null,
                    id: conversationId,
                    meta: {},
                    pinned: false,
                    share_id: null,
                    title: "Chat Pending",
                    updated_at: timestamp10,
                    user_id: null, // Will be filled by server
                    workspace_id: null,
                    workspace_name: null,
                    workspace_type: null
                };
                
                // Add assistant message to messages array
                conversationData.chat.messages.push(assistantMessage);
                
                // Add to history.messages
                conversationData.chat.history.messages[assistantMessageId] = assistantMessage;
                
                // Update parent message's childrenIds if it exists
                if (parentId && conversationData.chat.history.messages[parentId]) {
                    if (!conversationData.chat.history.messages[parentId].childrenIds) {
                        conversationData.chat.history.messages[parentId].childrenIds = [];
                    }
                    conversationData.chat.history.messages[parentId].childrenIds.push(assistantMessageId);
                    
                    // Also update in messages array
                    const parentInMessages = conversationData.chat.messages.find(msg => msg.id === parentId);
                    if (parentInMessages) {
                        if (!parentInMessages.childrenIds) {
                            parentInMessages.childrenIds = [];
                        }
                        parentInMessages.childrenIds.push(assistantMessageId);
                    }
                }

                Logger.log('StreamingAPI', 'Step 2: Posting conversation with assistant slot', {
                    totalMessages: conversationData.chat.messages.length,
                    assistantMessageId
                });

                // POST the conversation with assistant message slot
                const postResponse = await fetch(`${CONFIG.GET_CHAT_ENDPOINT}${conversationId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`
                    },
                    body: JSON.stringify(conversationData)
                });

                Logger.log('StreamingAPI', 'Step 2 response received', { 
                    status: postResponse.status
                });

                if (!postResponse.ok) {
                    throw new Error(`Step 2 failed: ${postResponse.status} ${postResponse.statusText}`);
                }

                const postResponseData = await postResponse.json();
                Logger.log('StreamingAPI', 'Step 2 complete - assistant message slot created', { 
                    assistantMessageId
                });

                return {
                    assistantMessageId: assistantMessageId,
                    conversationData: conversationData
                };

            } catch (error) {
                Logger.error('StreamingAPI', 'Step 2 failed', error);
                throw error;
            }
        }

        createStep3Payload(conversationId, assistantMessageId, messages) {
            Logger.log('StreamingAPI', 'Creating Step 3 payload', { 
                conversationId,
                assistantMessageId,
                messageCount: messages.length 
            });

            // Convert messages to simplified format (content + role only)
            const simplifiedMessages = messages.map(msg => ({
                content: msg.content,
                role: msg.role
            }));

            const payload = {
                background_tasks: {
                    title_generation: true,
                    tags_generation: true
                },
                chat_id: conversationId,
                features: {
                    web_search: true
                },
                id: assistantMessageId,
                messages: simplifiedMessages,
                model: "Anthropic Claude 4 Sonnet",
                params: {},
                session_id: CONFIG.SESSION_ID,
                stream: true
            };

            Logger.log('StreamingAPI', 'Step 3 payload created', { 
                simplifiedMessageCount: simplifiedMessages.length 
            });

            return payload;
        }

        async step3StreamResponse(conversationId, assistantMessageId, messages, onChunk, onComplete, onError) {
            Logger.log('StreamingAPI', 'STEP 3: Starting response stream', { 
                conversationId,
                assistantMessageId 
            });

            try {
                const payload = this.createStep3Payload(conversationId, assistantMessageId, messages);

                Logger.log('StreamingAPI', 'Sending Step 3 request', { 
                    endpoint: CONFIG.COMPLETIONS_ENDPOINT 
                });

                const response = await fetch(CONFIG.COMPLETIONS_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${this.token}`
                    },
                    body: JSON.stringify(payload)
                });

                Logger.log('StreamingAPI', 'Step 3 response received', { 
                    status: response.status,
                    statusText: response.statusText
                });

                if (!response.ok) {
                    throw new Error(`Step 3 failed: ${response.status} ${response.statusText}`);
                }

                if (!response.body) {
                    throw new Error('Step 3 - no response body for streaming');
                }

                Logger.log('StreamingAPI', 'Step 3 - starting to read SSE stream');

                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let buffer = '';
                let chunkCount = 0;

                try {
                    while (true) {
                        const { done, value } = await reader.read();
                        
                        if (done) {
                            Logger.log('StreamingAPI', 'Step 3 - stream ended', { totalChunks: chunkCount });
                            break;
                        }

                        // Reset activity timeout on each chunk
                        this.resetActivityTimeout();

                        const chunk = decoder.decode(value, { stream: true });
                        buffer += chunk;

                        // Process complete lines
                        const lines = buffer.split('\n');
                        buffer = lines.pop() || ''; // Keep incomplete line in buffer

                        for (const line of lines) {
                            const trimmedLine = line.trim();
                            
                            if (trimmedLine.startsWith('data: ')) {
                                const jsonStr = trimmedLine.slice(6); // Remove 'data: '
                                
                                if (jsonStr === '[DONE]') {
                                    Logger.log('StreamingAPI', 'Step 3 - received [DONE] marker');
                                    onComplete();
                                    return;
                                }

                                try {
                                    const data = JSON.parse(jsonStr);
                                    chunkCount++;
                                    
                                    Logger.log('StreamingAPI', `Step 3 - chunk ${chunkCount}`, { 
                                        hasChoices: !!data.choices,
                                        choiceCount: data.choices?.length || 0
                                    });

                                    if (data.choices && data.choices.length > 0) {
                                        const choice = data.choices[0];
                                        
                                        if (choice.finish_reason === 'stop') {
                                            Logger.log('StreamingAPI', 'Step 3 - received finish_reason: stop');
                                            onComplete();
                                            return;
                                        }
                                        
                                        if (choice.delta && choice.delta.content) {
                                            Logger.log('StreamingAPI', `Step 3 - content chunk: "${choice.delta.content.substring(0, 50)}..."`);
                                            onChunk(choice.delta.content);
                                        }
                                    }
                                    
                                } catch (parseError) {
                                    Logger.warn('StreamingAPI', 'Step 3 - failed to parse chunk', { 
                                        jsonStr: jsonStr.substring(0, 100),
                                        error: parseError.message 
                                    });
                                }
                            }
                        }
                    }

                } finally {
                    reader.releaseLock();
                    this.clearActivityTimeout();
                }

            } catch (error) {
                this.clearActivityTimeout();
                Logger.error('StreamingAPI', 'Step 3 failed', error);
                onError(error);
            }
        }

        async sendMessage(userMessage, conversationHistory = [], existingConversationId = null, onChunk, onComplete, onError, onProgress = null) {
            const isNewConversation = !existingConversationId;
            
            Logger.log('StreamingAPI', 'Starting message flow', { 
                userMessage: userMessage.substring(0, 50) + '...',
                isNewConversation,
                existingConversationId,
                historyLength: conversationHistory.length
            });

            try {
                let conversationId;
                let step2Result;
                
                if (isNewConversation) {
                    Logger.log('StreamingAPI', 'NEW CONVERSATION: Running Step 1 + Step 2');
                    
                    // Step 1: Create conversation
                    if (onProgress) onProgress(1, 4, 'Creating conversation...');
                    const step1Result = await this.step1CreateConversation(userMessage, conversationHistory);
                    conversationId = step1Result.conversationId;
                    
                    // Step 2: Add assistant message slot (no GET needed)
                    if (onProgress) onProgress(2, 4, 'Adding assistant message slot...');
                    step2Result = await this.step2AddAssistantSlot(
                        step1Result.conversationId,
                        step1Result.payload
                    );
                } else {
                    Logger.log('StreamingAPI', 'EXISTING CONVERSATION: Running Step 2 only');
                    conversationId = existingConversationId;
                    
                    // Step 2: Add assistant slot to existing conversation with full history
                    if (onProgress) onProgress(1, 2, 'Adding message to conversation...');
                    step2Result = await this.step2AddAssistantSlotToExistingConversation(
                        existingConversationId,
                        userMessage,
                        conversationHistory
                    );
                }
                
                // Step 3: Stream response (same for both flows)
                const allMessages = [
                    ...conversationHistory,
                    { role: 'user', content: userMessage }
                ];
                
                if (isNewConversation) {
                    if (onProgress) onProgress(3, 4, 'Starting response stream...');
                } else {
                    if (onProgress) onProgress(2, 2, 'Starting response stream...');
                }
                
                await this.step3StreamResponse(
                    conversationId,
                    step2Result.assistantMessageId,
                    allMessages,
                    (chunk) => {
                        // Clear progress on first chunk
                        if (onProgress) onProgress(null);
                        onChunk(chunk);
                    },
                    onComplete,
                    onError
                );

                // Return conversation ID for new conversations
                return { conversationId };

            } catch (error) {
                Logger.error('StreamingAPI', 'Complete message flow failed', error);
                onError(error);
            }
        }
    }

    // File System Emulation
    class FileSystemManager {
        constructor() {
            Logger.log('FileSystem', 'Initializing File System Manager');
        }

        static getFileKey(projectId, path) {
            return `file-system.${projectId}.${path}`;
        }

        readFile(projectId, path) {
            const key = FileSystemManager.getFileKey(projectId, path);
            const content = localStorage.getItem(key);
            Logger.log('FileSystem', 'Read file', { projectId, path, found: !!content });
            return content;
        }

        writeFile(projectId, path, content) {
            const key = FileSystemManager.getFileKey(projectId, path);
            localStorage.setItem(key, content);
            Logger.log('FileSystem', 'Write file', { projectId, path, size: content.length });
        }

        searchFiles(projectId, query, pathPattern = '*') {
            const prefix = `file-system.${projectId}.`;
            const results = [];
            
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && key.startsWith(prefix)) {
                    const path = key.substring(prefix.length);
                    const content = localStorage.getItem(key);
                    
                    // Simple pattern matching (could be enhanced)
                    if (pathPattern === '*' || path.includes(pathPattern.replace('*', ''))) {
                        if (content && content.toLowerCase().includes(query.toLowerCase())) {
                            const lines = content.split('\n');
                            const matchingLines = lines
                                .map((line, index) => ({ line: line.trim(), number: index + 1 }))
                                .filter(({ line }) => line.toLowerCase().includes(query.toLowerCase()))
                                .slice(0, 3); // Limit to 3 matches per file
                            
                            results.push({
                                path,
                                matches: matchingLines
                            });
                        }
                    }
                }
            }
            
            Logger.log('FileSystem', 'Search files', { projectId, query, found: results.length });
            return results;
        }

        listFiles(projectId, pathPrefix = '') {
            const prefix = `file-system.${projectId}.${pathPrefix}`;
            const files = [];
            
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key && key.startsWith(prefix)) {
                    const path = key.substring(`file-system.${projectId}.`.length);
                    files.push(path);
                }
            }
            
            return files.sort();
        }
    }

    // Project Management
    class ProjectManager {
        constructor() {
            Logger.log('ProjectManager', 'Initializing Project Manager');
            this.projects = this.loadProjects();
        }

        loadProjects() {
            try {
                const stored = localStorage.getItem(CONFIG.PROJECTS_KEY);
                return stored ? JSON.parse(stored) : [];
            } catch (e) {
                Logger.error('ProjectManager', 'Failed to load projects', e);
                return [];
            }
        }

        saveProjects() {
            try {
                localStorage.setItem(CONFIG.PROJECTS_KEY, JSON.stringify(this.projects));
            } catch (e) {
                Logger.error('ProjectManager', 'Failed to save projects', e);
            }
        }

        createProject(name) {
            const id = name.toLowerCase().replace(/[^a-z0-9-]/g, '-');
            const project = {
                id,
                name,
                created: new Date().toISOString()
            };
            
            this.projects.push(project);
            this.saveProjects();
            Logger.log('ProjectManager', 'Project created', { id, name });
            return project;
        }

        getProject(id) {
            return this.projects.find(p => p.id === id);
        }

        listProjects() {
            return [...this.projects];
        }
    }

    // Tool Use Parser and Executor
    class ToolManager {
        constructor(fileSystem, projectManager) {
            this.fileSystem = fileSystem;
            this.projectManager = projectManager;
            this.activeProjects = [];
            Logger.log('ToolManager', 'Initializing Tool Manager');
        }

        setActiveProjects(projectIds) {
            this.activeProjects = projectIds;
            Logger.log('ToolManager', 'Active projects set', { projectIds });
        }

        parseToolUses(text) {
            const toolUses = [];
            const regex = /<tool_use>(.*?)<\/tool_use>/gs;
            let match;
            
            while ((match = regex.exec(text)) !== null) {
                try {
                    const toolData = JSON.parse(match[1]);
                    toolUses.push({
                        fullMatch: match[0],
                        startIndex: match.index,
                        endIndex: match.index + match[0].length,
                        data: toolData
                    });
                } catch (e) {
                    Logger.warn('ToolManager', 'Failed to parse tool use', { text: match[1] });
                }
            }
            
            return toolUses;
        }

        async executeTool(toolData) {
            Logger.log('ToolManager', 'Executing tool', { type: toolData.tool_type });
            
            switch (toolData.tool_type) {
                case 'read_file':
                    return this.executeReadFile(toolData);
                case 'search_files':
                    return this.executeSearchFiles(toolData);
                default:
                    throw new Error(`Unknown tool type: ${toolData.tool_type}`);
            }
        }

        executeReadFile(toolData) {
            const { path } = toolData;
            const results = [];
            
            for (const projectId of this.activeProjects) {
                const content = this.fileSystem.readFile(projectId, path);
                if (content !== null) {
                    results.push({
                        projectId,
                        path,
                        found: true,
                        content,
                        size: content.length
                    });
                } else {
                    results.push({
                        projectId,
                        path,
                        found: false,
                        error: 'File not found'
                    });
                }
            }
            
            return {
                tool_type: 'read_file',
                path,
                results
            };
        }

        executeSearchFiles(toolData) {
            const { query, path_pattern } = toolData;
            const results = [];
            
            for (const projectId of this.activeProjects) {
                const searchResults = this.fileSystem.searchFiles(projectId, query, path_pattern);
                results.push({
                    projectId,
                    query,
                    matches: searchResults
                });
            }
            
            return {
                tool_type: 'search_files',
                query,
                path_pattern,
                results
            };
        }
    }

    // Streaming Response Parser with Tool Use Detection
    class StreamingParser {
        constructor(toolManager) {
            this.toolManager = toolManager;
            this.reset();
        }

        reset() {
            this.buffer = '';
            this.output = '';
            this.toolUses = [];
            this.inProgress = false;
        }

        processChunk(chunk) {
            this.buffer += chunk;
            const result = {
                displayText: '',
                toolUses: [],
                isComplete: false
            };

            let searchStart = 0;
            
            while (true) {
                // Look for start of potential tool use
                const toolStart = this.buffer.indexOf('<tool_use>', searchStart);
                
                if (toolStart === -1) {
                    // No tool use found, output remaining buffer
                    if (searchStart < this.buffer.length) {
                        const remaining = this.buffer.substring(searchStart);
                        this.output += remaining;
                        result.displayText += remaining;
                        this.buffer = '';
                    }
                    break;
                }
                
                // Output text before tool use
                if (toolStart > searchStart) {
                    const beforeTool = this.buffer.substring(searchStart, toolStart);
                    this.output += beforeTool;
                    result.displayText += beforeTool;
                }
                
                // Look for end of tool use
                const toolEnd = this.buffer.indexOf('</tool_use>', toolStart);
                
                if (toolEnd === -1) {
                    // Tool use not complete yet, keep in buffer
                    this.buffer = this.buffer.substring(toolStart);
                    break;
                }
                
                // Extract complete tool use
                const toolUseText = this.buffer.substring(toolStart, toolEnd + 11);
                const toolContent = this.buffer.substring(toolStart + 10, toolEnd);
                
                try {
                    const toolData = JSON.parse(toolContent);
                    const toolUse = {
                        data: toolData,
                        text: toolUseText
                    };
                    
                    this.toolUses.push(toolUse);
                    result.toolUses.push(toolUse);
                    
                    Logger.log('StreamingParser', 'Tool use detected', { type: toolData.tool_type });
                } catch (e) {
                    // Not valid JSON, treat as regular text
                    this.output += toolUseText;
                    result.displayText += toolUseText;
                }
                
                searchStart = toolEnd + 11;
            }

            return result;
        }

        getCompleteOutput() {
            return this.output;
        }

        getToolUses() {
            return [...this.toolUses];
        }
    }

    // Chat Management
    class ChatManager {
        constructor() {
            Logger.log('ChatManager', 'Initializing ChatManager');
            this.data = this.loadData();
        }

        loadData() {
            try {
                const stored = localStorage.getItem(CONFIG.STORAGE_KEY);
                return stored ? JSON.parse(stored) : { chats: [], currentChatId: null };
            } catch (e) {
                Logger.error('ChatManager', 'Failed to load chat data', e);
                return { chats: [], currentChatId: null };
            }
        }

        saveData() {
            try {
                localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(this.data));
            } catch (e) {
                Logger.error('ChatManager', 'Failed to save chat data', e);
            }
        }

        createNewChat() {
            const chatId = Date.now().toString();
            const chat = {
                id: chatId,
                timestamp: new Date().toLocaleString(),
                messages: [],
                conversationId: null, // Will be set when first message is sent
                activeProjects: [] // Projects accessible to this chat
            };
            this.data.chats.unshift(chat);
            this.data.currentChatId = chatId;
            this.saveData();
            Logger.log('ChatManager', 'New chat created', { chatId });
            return chat;
        }

        getCurrentChat() {
            if (!this.data.currentChatId) return null;
            return this.data.chats.find(chat => chat.id === this.data.currentChatId);
        }

        selectChat(chatId) {
            this.data.currentChatId = chatId;
            this.saveData();
        }

        addMessage(role, content) {
            const chat = this.getCurrentChat();
            if (chat) {
                chat.messages.push({ role, content, timestamp: Date.now() });
                this.saveData();
                Logger.log('ChatManager', 'Message added', { role });
            }
        }

        getConversationHistory() {
            const currentChat = this.getCurrentChat();
            if (!currentChat) return [];
            
            return currentChat.messages.map(msg => ({
                role: msg.role,
                content: msg.content
            }));
        }

        setConversationId(conversationId) {
            const chat = this.getCurrentChat();
            if (chat) {
                chat.conversationId = conversationId;
                this.saveData();
                Logger.log('ChatManager', 'Conversation ID set', { 
                    chatId: chat.id, 
                    conversationId 
                });
            }
        }

        getConversationId() {
            const chat = this.getCurrentChat();
            return chat ? chat.conversationId : null;
        }

        setActiveProjects(projectIds) {
            const chat = this.getCurrentChat();
            if (chat) {
                chat.activeProjects = projectIds;
                this.saveData();
                Logger.log('ChatManager', 'Active projects set', { 
                    chatId: chat.id, 
                    projectIds 
                });
            }
        }

        getActiveProjects() {
            const chat = this.getCurrentChat();
            return chat ? chat.activeProjects : [];
        }
    }

    // Complete page replacement
    function replacePageWithStreamingUI() {
        Logger.log('UI', 'Completely replacing page content');
        
        // Clear entire page
        document.head.innerHTML = '';
        document.body.innerHTML = '';
        
        // Add basic meta tags
        const meta = document.createElement('meta');
        meta.setAttribute('charset', 'UTF-8');
        document.head.appendChild(meta);
        
        const viewport = document.createElement('meta');
        viewport.setAttribute('name', 'viewport');
        viewport.setAttribute('content', 'width=device-width, initial-scale=1.0');
        document.head.appendChild(viewport);
        
        const title = document.createElement('title');
        title.textContent = 'AI Chat Interface';
        document.head.appendChild(title);

        const container = document.createElement('div');
        container.id = 'ai-chat-interface';
        container.innerHTML = `
            <div class="app-container">
                <div class="app-header">
                    <div class="tabs">
                        <button id="chat-tab" class="tab-btn active">Chat</button>
                        <button id="projects-tab" class="tab-btn">Projects</button>
                    </div>
                    <div class="header-controls">
                        <button id="close-overlay-streaming" class="btn btn-danger">×</button>
                    </div>
                </div>
                
                <!-- Chat Tab Content -->
                <div id="chat-content" class="tab-content active">
                    <div class="chat-container">
                        <div class="chat-sidebar">
                            <div class="sidebar-section">
                                <h3>Previous Chats</h3>
                                <button id="new-chat-streaming" class="btn btn-small">+ New Chat</button>
                                <div id="chat-list-streaming" class="chat-list"></div>
                            </div>
                            <div class="sidebar-section">
                                <h3>Active Projects</h3>
                                <div id="active-projects-list" class="project-list"></div>
                            </div>
                        </div>
                        
                        <div class="main-chat">
                            <div id="messages-streaming" class="messages"></div>
                            <div class="input-area">
                                <textarea id="user-input-streaming" placeholder="Type your message..." rows="3"></textarea>
                                <button id="send-btn-streaming" class="btn btn-primary">Send</button>
                            </div>
                            <div id="status-streaming" class="status">Ready - Streaming API</div>
                        </div>
                    </div>
                </div>
                
                <!-- Projects Tab Content -->
                <div id="projects-content" class="tab-content">
                    <div class="projects-container">
                        <div class="projects-sidebar">
                            <div class="sidebar-section">
                                <h3>Projects</h3>
                                <button id="new-project-btn" class="btn btn-small">+ New Project</button>
                                <div id="projects-list" class="projects-list"></div>
                            </div>
                            <div class="sidebar-section" id="file-tree-section" style="display: none;">
                                <h3>Files</h3>
                                <button id="new-file-btn" class="btn btn-small">+ New File</button>
                                <div id="file-tree" class="file-tree"></div>
                            </div>
                        </div>
                        
                        <div class="main-projects">
                            <div id="file-editor" class="file-editor">
                                <div class="editor-placeholder">
                                    Select a project and file to start editing
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        // Add CSS styling
        const style = document.createElement('style');
        style.textContent = `
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            html, body {
                height: 100%;
                overflow: hidden;
            }
            
            #ai-chat-interface {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: #1a1a1a;
                color: #e0e0e0;
                font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                font-size: 14px;
                z-index: 9999;
                display: flex;
                flex-direction: column;
            }

            .app-container {
                display: flex;
                flex-direction: column;
                height: 100%;
            }

            .app-header {
                background: #2d2d2d;
                padding: 15px 20px;
                border-bottom: 1px solid #444;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .tabs {
                display: flex;
                gap: 2px;
            }

            .tab-btn {
                background: #333;
                border: 1px solid #555;
                color: #ccc;
                padding: 8px 16px;
                cursor: pointer;
                font-family: inherit;
                font-size: 14px;
                border-radius: 4px 4px 0 0;
                transition: all 0.2s;
            }

            .tab-btn:hover {
                background: #3a3a3a;
                color: #e0e0e0;
            }

            .tab-btn.active {
                background: #1a1a1a;
                color: #e0e0e0;
                border-bottom-color: #1a1a1a;
            }

            .header-controls {
                display: flex;
                gap: 10px;
            }

            .tab-content {
                display: none;
                flex: 1;
                overflow: hidden;
            }

            .tab-content.active {
                display: flex;
                flex-direction: column;
            }

            .chat-container, .projects-container {
                display: flex;
                flex: 1;
                overflow: hidden;
            }

            .chat-sidebar, .projects-sidebar {
                width: 280px;
                background: #252525;
                border-right: 1px solid #444;
                overflow-y: auto;
                display: flex;
                flex-direction: column;
            }

            .sidebar-section {
                padding: 15px;
                border-bottom: 1px solid #333;
            }

            .sidebar-section:last-child {
                border-bottom: none;
                flex: 1;
            }

            .sidebar-section h3 {
                margin: 0 0 10px 0;
                font-size: 14px;
                font-weight: normal;
                color: #ccc;
            }

            .btn-small {
                padding: 6px 12px;
                font-size: 12px;
                margin-bottom: 10px;
                width: 100%;
            }

            .chat-list {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }

            .chat-item {
                padding: 8px 12px;
                background: #333;
                border: 1px solid #444;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                transition: background-color 0.2s;
            }

            .chat-item:hover {
                background: #3a3a3a;
            }

            .chat-item.active {
                background: #0d7377;
                border-color: #14a085;
            }

            .main-chat {
                flex: 1;
                display: flex;
                flex-direction: column;
                overflow: hidden;
            }

            .messages {
                flex: 1;
                overflow-y: auto;
                padding: 20px;
                display: flex;
                flex-direction: column;
                gap: 15px;
            }

            .message {
                max-width: 80%;
                padding: 12px 16px;
                border-radius: 8px;
                white-space: pre-wrap;
                word-wrap: break-word;
            }

            .message.user {
                align-self: flex-end;
                background: #0d7377;
                border: 1px solid #14a085;
            }

            .message.assistant {
                align-self: flex-start;
                background: #2d2d2d;
                border: 1px solid #444;
            }

            .message.streaming {
                border-left: 3px solid #ffa726;
            }

            .message.progress {
                border-left: 3px solid #2196f3;
                padding: 8px 16px;
                min-height: 20px;
                display: flex;
                align-items: center;
            }

            .progress-bar-container {
                width: 100%;
                height: 8px;
                background: #444;
                border-radius: 4px;
                overflow: hidden;
            }

            .progress-bar-fill {
                height: 100%;
                background: linear-gradient(90deg, #2196f3, #64b5f6);
                border-radius: 4px;
                transition: width 0.3s ease;
            }

            .message.tool-result {
                border-left: 3px solid #9c27b0;
                background: #2a2a2a;
                cursor: pointer;
                transition: background-color 0.2s;
            }

            .message.tool-result:hover {
                background: #333;
            }

            .tool-use-indicator {
                display: inline-flex;
                align-items: center;
                gap: 8px;
                background: #3a3a3a;
                border: 1px solid #555;
                border-radius: 4px;
                padding: 4px 8px;
                margin: 2px 4px;
                cursor: pointer;
                transition: background-color 0.2s;
            }

            .tool-use-indicator:hover {
                background: #444;
            }

            .tool-icon {
                font-size: 14px;
            }

            .tool-main {
                font-size: 12px;
                color: #ccc;
                font-family: monospace;
            }

            .tool-header {
                display: flex;
                align-items: center;
                gap: 8px;
                margin-bottom: 8px;
                font-weight: bold;
            }

            .tool-title {
                color: #e0e0e0;
            }

            .tool-preview {
                font-size: 12px;
                color: #aaa;
                white-space: pre-line;
            }

            .projects-list, .project-list {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }

            .project-item {
                padding: 8px 12px;
                background: #333;
                border: 1px solid #444;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                transition: background-color 0.2s;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .project-item:hover {
                background: #3a3a3a;
            }

            .project-item.active {
                background: #0d7377;
                border-color: #14a085;
            }

            .project-item.selected {
                background: #2a4d50;
                border-color: #0d7377;
            }

            .project-name {
                flex: 1;
            }

            .project-toggle {
                background: none;
                border: none;
                color: #ccc;
                font-size: 10px;
                cursor: pointer;
                padding: 2px 6px;
                border-radius: 2px;
            }

            .project-toggle:hover {
                background: #555;
            }

            .project-toggle.active {
                color: #4caf50;
            }

            .file-tree {
                display: flex;
                flex-direction: column;
                gap: 2px;
            }

            .file-item {
                padding: 6px 8px;
                background: #2a2a2a;
                border: 1px solid #3a3a3a;
                border-radius: 3px;
                cursor: pointer;
                font-size: 11px;
                font-family: monospace;
                transition: background-color 0.2s;
            }

            .file-item:hover {
                background: #333;
            }

            .file-item.active {
                background: #0d7377;
                border-color: #14a085;
            }

            .main-projects {
                flex: 1;
                display: flex;
                flex-direction: column;
                overflow: hidden;
            }

            .file-editor {
                flex: 1;
                background: #1a1a1a;
                position: relative;
                display: flex;
                flex-direction: column;
            }

            .editor-placeholder {
                display: flex;
                align-items: center;
                justify-content: center;
                flex: 1;
                color: #666;
                font-size: 14px;
            }

            .editor-header {
                background: #2d2d2d;
                padding: 10px 15px;
                border-bottom: 1px solid #444;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .editor-filename {
                font-family: monospace;
                color: #e0e0e0;
            }

            .editor-actions {
                display: flex;
                gap: 5px;
            }

            .editor-content {
                flex: 1;
                overflow: auto;
                padding: 15px;
            }

            .editor-textarea {
                width: 100%;
                height: 100%;
                background: #1a1a1a;
                border: none;
                color: #e0e0e0;
                font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                font-size: 13px;
                line-height: 1.4;
                resize: none;
                outline: none;
                padding: 0;
                margin: 0;
            }

            .input-area {
                padding: 15px 20px;
                background: #2d2d2d;
                border-top: 1px solid #444;
                display: flex;
                gap: 10px;
                align-items: flex-end;
            }

            #user-input-streaming {
                flex: 1;
                background: #1a1a1a;
                border: 1px solid #444;
                border-radius: 4px;
                color: #e0e0e0;
                padding: 10px;
                font-family: inherit;
                font-size: inherit;
                resize: vertical;
                min-height: 60px;
            }

            #user-input-streaming:focus {
                outline: none;
                border-color: #0d7377;
            }

            .btn {
                background: #333;
                border: 1px solid #444;
                color: #e0e0e0;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-family: inherit;
                font-size: inherit;
                transition: background-color 0.2s;
            }

            .btn:hover {
                background: #3a3a3a;
            }

            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .btn-primary {
                background: #0d7377;
                border-color: #14a085;
                height: fit-content;
            }

            .btn-primary:hover:not(:disabled) {
                background: #0a5d61;
            }

            .btn-danger {
                background: #d32f2f;
                border-color: #f44336;
            }

            .btn-danger:hover {
                background: #b71c1c;
            }

            .status {
                padding: 10px 20px;
                background: #2d2d2d;
                border-top: 1px solid #444;
                font-size: 12px;
                color: #aaa;
                min-height: 20px;
            }

            .status.processing {
                color: #ffa726;
            }

            .status.error {
                color: #f44336;
            }

            .status.success {
                color: #4caf50;
            }

            .status.ready {
                color: #4caf50;
            }

            .status.streaming {
                color: #ffa726;
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(container);

        Logger.log('UI', 'Page replacement complete');
        return container;
    }

    // Main App
    class StreamingChatApp {
        constructor() {
            Logger.log('App', 'Initializing Streaming Chat App');
            this.apiManager = new StreamingAPIManager();
            this.chatManager = new ChatManager();
            this.fileSystem = new FileSystemManager();
            this.projectManager = new ProjectManager();
            this.toolManager = new ToolManager(this.fileSystem, this.projectManager);
            this.streamingParser = new StreamingParser(this.toolManager);
            this.container = null;
            this.elements = {};
            this.lastActivityTime = Date.now();
            this.heartbeatTimer = null;
            this.currentStreamingMessage = null;
            this.pendingToolExecutions = [];
        }

        async init() {
            Logger.log('App', 'Starting initialization');
            
            // Block non-app requests first
            blockNonAppRequests();
            
            // Replace entire page with our UI
            this.container = replacePageWithStreamingUI();
            this.bindElements();
            this.bindEvents();
            
            // Check authentication
            if (this.apiManager.isReady) {
                this.updateStatus('Ready - Streaming API', 'ready');
                this.updateUI();
                this.startHeartbeat();
                Logger.log('App', 'Initialization complete');
            } else {
                this.updateStatus('Authentication required - No token found', 'error');
                this.updateUI();
                Logger.error('App', 'Initialization failed - no auth token');
            }
        }

        bindElements() {
            this.elements = {
                // Tab elements
                chatTab: document.getElementById('chat-tab'),
                projectsTab: document.getElementById('projects-tab'),
                chatContent: document.getElementById('chat-content'),
                projectsContent: document.getElementById('projects-content'),
                
                // Chat elements
                newChatBtn: document.getElementById('new-chat-streaming'),
                closeBtn: document.getElementById('close-overlay-streaming'),
                chatList: document.getElementById('chat-list-streaming'),
                messages: document.getElementById('messages-streaming'),
                userInput: document.getElementById('user-input-streaming'),
                sendBtn: document.getElementById('send-btn-streaming'),
                status: document.getElementById('status-streaming'),
                activeProjectsList: document.getElementById('active-projects-list'),
                
                // Project elements
                newProjectBtn: document.getElementById('new-project-btn'),
                projectsList: document.getElementById('projects-list'),
                fileTreeSection: document.getElementById('file-tree-section'),
                fileTree: document.getElementById('file-tree'),
                newFileBtn: document.getElementById('new-file-btn'),
                fileEditor: document.getElementById('file-editor')
            };
        }

        bindEvents() {
            // Tab switching
            this.elements.chatTab.addEventListener('click', () => {
                this.switchTab('chat');
            });
            
            this.elements.projectsTab.addEventListener('click', () => {
                this.switchTab('projects');
            });

            // Chat events
            this.elements.newChatBtn.addEventListener('click', () => {
                this.createNewChat();
            });

            this.elements.closeBtn.addEventListener('click', () => {
                this.close();
            });

            this.elements.sendBtn.addEventListener('click', () => {
                this.sendMessage();
            });

            this.elements.userInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });

            // Project events
            this.elements.newProjectBtn.addEventListener('click', () => {
                this.createNewProject();
            });

            this.elements.newFileBtn.addEventListener('click', () => {
                this.createNewFile();
            });
        }

        switchTab(tabName) {
            // Update tab buttons
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            if (tabName === 'chat') {
                this.elements.chatTab.classList.add('active');
                this.elements.chatContent.classList.add('active');
            } else if (tabName === 'projects') {
                this.elements.projectsTab.classList.add('active');
                this.elements.projectsContent.classList.add('active');
                this.updateProjectsUI();
            }
        }

        createNewChat() {
            this.chatManager.createNewChat();
            this.updateUI();
            this.elements.userInput.focus();
        }

        selectChat(chatId) {
            this.chatManager.selectChat(chatId);
            this.updateUI();
        }

        updateUI() {
            this.updateChatList();
            this.updateMessages();
            this.updateActiveProjects();
        }

        updateActiveProjects() {
            const activeProjects = this.chatManager.getActiveProjects();
            this.toolManager.setActiveProjects(activeProjects);
            
            // Update active projects list in chat sidebar
            const list = this.elements.activeProjectsList;
            if (list) {
                list.innerHTML = '';
                
                if (activeProjects.length === 0) {
                    list.innerHTML = '<div style="color: #666; font-size: 12px;">No projects selected</div>';
                } else {
                    activeProjects.forEach(projectId => {
                        const project = this.projectManager.getProject(projectId);
                        if (project) {
                            const item = document.createElement('div');
                            item.className = 'project-item active';
                            item.innerHTML = `
                                <span class="project-name">${project.name}</span>
                                <button class="project-toggle active">✓</button>
                            `;
                            
                            item.querySelector('.project-toggle').addEventListener('click', (e) => {
                                e.stopPropagation();
                                this.toggleProjectForChat(projectId);
                            });
                            
                            list.appendChild(item);
                        }
                    });
                }
            }
        }

        updateProjectsUI() {
            this.updateProjectsList();
            this.updateFileTree();
        }

        updateProjectsList() {
            const list = this.elements.projectsList;
            if (!list) return;
            
            list.innerHTML = '';
            const projects = this.projectManager.listProjects();
            
            if (projects.length === 0) {
                list.innerHTML = '<div style="color: #666; font-size: 12px;">No projects yet</div>';
                return;
            }
            
            projects.forEach(project => {
                const item = document.createElement('div');
                item.className = 'project-item';
                if (this.selectedProject === project.id) {
                    item.classList.add('selected');
                }
                
                const isActive = this.chatManager.getActiveProjects().includes(project.id);
                
                item.innerHTML = `
                    <span class="project-name">${project.name}</span>
                    <button class="project-toggle ${isActive ? 'active' : ''}">${isActive ? '✓' : '+'}</button>
                `;
                
                item.addEventListener('click', (e) => {
                    if (e.target.classList.contains('project-toggle')) return;
                    this.selectProject(project.id);
                });
                
                item.querySelector('.project-toggle').addEventListener('click', (e) => {
                    e.stopPropagation();
                    this.toggleProjectForChat(project.id);
                });
                
                list.appendChild(item);
            });
        }

        selectProject(projectId) {
            this.selectedProject = projectId;
            this.updateProjectsList();
            this.updateFileTree();
            
            // Show file tree section
            this.elements.fileTreeSection.style.display = 'block';
        }

        toggleProjectForChat(projectId) {
            const activeProjects = this.chatManager.getActiveProjects();
            const index = activeProjects.indexOf(projectId);
            
            if (index === -1) {
                activeProjects.push(projectId);
            } else {
                activeProjects.splice(index, 1);
            }
            
            this.chatManager.setActiveProjects(activeProjects);
            this.updateActiveProjects();
            this.updateProjectsList();
        }

        updateFileTree() {
            const tree = this.elements.fileTree;
            if (!tree || !this.selectedProject) return;
            
            tree.innerHTML = '';
            const files = this.fileSystem.listFiles(this.selectedProject);
            
            if (files.length === 0) {
                tree.innerHTML = '<div style="color: #666; font-size: 11px;">No files yet</div>';
                return;
            }
            
            files.forEach(filePath => {
                const item = document.createElement('div');
                item.className = 'file-item';
                if (this.selectedFile === filePath) {
                    item.classList.add('active');
                }
                
                item.textContent = filePath;
                item.addEventListener('click', () => {
                    this.selectFile(filePath);
                });
                
                tree.appendChild(item);
            });
        }

        selectFile(filePath) {
            this.selectedFile = filePath;
            this.updateFileTree();
            this.openFileInEditor(filePath);
        }

        openFileInEditor(filePath) {
            const content = this.fileSystem.readFile(this.selectedProject, filePath);
            const editor = this.elements.fileEditor;
            
            editor.innerHTML = `
                <div class="editor-header">
                    <div class="editor-filename">${filePath}</div>
                    <div class="editor-actions">
                        <button class="btn btn-small" onclick="window.aiChatOverlayStreaming.saveCurrentFile()">Save</button>
                        <button class="btn btn-small" onclick="window.aiChatOverlayStreaming.closeEditor()">Close</button>
                    </div>
                </div>
                <div class="editor-content">
                    <textarea class="editor-textarea" placeholder="Start typing...">${content || ''}</textarea>
                </div>
            `;
        }

        createNewProject() {
            const name = prompt('Project name:');
            if (name && name.trim()) {
                const project = this.projectManager.createProject(name.trim());
                this.updateProjectsList();
                this.selectProject(project.id);
            }
        }

        createNewFile() {
            if (!this.selectedProject) {
                alert('Please select a project first');
                return;
            }
            
            const path = prompt('File path (e.g., /src/main.js):');
            if (path && path.trim()) {
                const filePath = path.trim();
                this.fileSystem.writeFile(this.selectedProject, filePath, '');
                this.updateFileTree();
                this.selectFile(filePath);
            }
        }

        saveCurrentFile() {
            if (!this.selectedProject || !this.selectedFile) return;
            
            const textarea = document.querySelector('.editor-textarea');
            if (textarea) {
                this.fileSystem.writeFile(this.selectedProject, this.selectedFile, textarea.value);
                this.updateStatus('File saved', 'success');
                setTimeout(() => {
                    this.updateStatus('Ready - Streaming API', 'ready');
                }, 2000);
            }
        }

        closeEditor() {
            this.selectedFile = null;
            this.updateFileTree();
            this.elements.fileEditor.innerHTML = `
                <div class="editor-placeholder">
                    Select a project and file to start editing
                </div>
            `;
        }

        createToolUseIndicator(toolData) {
            const indicator = document.createElement('div');
            indicator.className = 'tool-use-indicator';
            
            const icon = toolData.tool_type === 'read_file' ? '📖' : '🔍';
            const mainProp = toolData.tool_type === 'read_file' ? toolData.path : toolData.query;
            
            indicator.innerHTML = `
                <span class="tool-icon">${icon}</span>
                <span class="tool-main">${mainProp}</span>
            `;
            
            indicator.addEventListener('click', () => {
                // TODO: Expand tool use details
                console.log('Tool use clicked:', toolData);
            });
            
            return indicator;
        }

        createToolResultBubble(toolResult) {
            const bubble = document.createElement('div');
            bubble.className = 'message tool-result';
            
            const icon = toolResult.tool_type === 'read_file' ? '📖' : '🔍';
            const title = toolResult.tool_type === 'read_file' ? 
                `Tool Result: Read File` : 
                `Tool Result: Search Files`;
            
            // Create preview of results
            let preview = '';
            if (toolResult.tool_type === 'read_file') {
                const successCount = toolResult.results.filter(r => r.found).length;
                preview = `${toolResult.path}\nFound in ${successCount} project(s) [click to expand]`;
            } else {
                const totalMatches = toolResult.results.reduce((sum, r) => sum + r.matches.length, 0);
                preview = `"${toolResult.query}"\nFound ${totalMatches} matches [click to expand]`;
            }
            
            bubble.innerHTML = `
                <div class="tool-header">
                    <span class="tool-icon">${icon}</span>
                    <span class="tool-title">${title}</span>
                </div>
                <div class="tool-preview">${preview}</div>
            `;
            
            bubble.addEventListener('click', () => {
                // TODO: Expand full tool results
                console.log('Tool result clicked:', toolResult);
            });
            
            return bubble;
        }

        updateChatList() {
            const chatList = this.elements.chatList;
            chatList.innerHTML = '';

            this.chatManager.data.chats.forEach(chat => {
                const item = document.createElement('div');
                item.className = 'chat-item';
                if (chat.id === this.chatManager.data.currentChatId) {
                    item.classList.add('active');
                }
                
                item.textContent = chat.timestamp;
                item.addEventListener('click', () => {
                    this.selectChat(chat.id);
                });
                
                chatList.appendChild(item);
            });
        }

        updateMessages() {
            const messages = this.elements.messages;
            messages.innerHTML = '';

            const currentChat = this.chatManager.getCurrentChat();
            if (!currentChat) return;

            currentChat.messages.forEach((msg) => {
                const messageEl = document.createElement('div');
                messageEl.className = `message ${msg.role}`;
                messageEl.textContent = msg.content;
                messages.appendChild(messageEl);
            });

            messages.scrollTop = messages.scrollHeight;
        }

        createStreamingMessage() {
            const messageEl = document.createElement('div');
            messageEl.className = 'message assistant streaming';
            messageEl.textContent = '';
            this.elements.messages.appendChild(messageEl);
            this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
            return messageEl;
        }

        createProgressMessage() {
            const messageEl = document.createElement('div');
            messageEl.className = 'message assistant progress';
            messageEl.innerHTML = `
                <div class="progress-bar-container">
                    <div class="progress-bar-fill" style="width: 0%"></div>
                </div>
            `;
            this.elements.messages.appendChild(messageEl);
            this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
            return messageEl;
        }

        updateProgressMessage(message, current, total) {
            if (!this.currentStreamingMessage || !this.currentStreamingMessage.classList.contains('progress')) {
                return;
            }
            
            const progressFill = this.currentStreamingMessage.querySelector('.progress-bar-fill');
            
            if (progressFill) {
                const percentage = (current / total) * 100;
                progressFill.style.width = `${percentage}%`;
                progressFill.style.transition = 'width 0.3s ease';
            }
        }

        updateStatus(text, type = '', progress = null) {
            let statusText = text;
            if (progress) {
                statusText = `${text} (${progress.current}/${progress.total})`;
            }
            this.elements.status.textContent = statusText;
            this.elements.status.className = `status ${type}`;
        }

        async sendMessage(isHeartbeat = false) {
            const input = this.elements.userInput;
            let message;
            
            // Check authentication
            if (!this.apiManager.checkAuthToken()) {
                if (!isHeartbeat) {
                    this.updateStatus('Authentication required - No token found', 'error');
                }
                return;
            }
            
            if (isHeartbeat) {
                message = CONFIG.HEARTBEAT_MESSAGE;
                Logger.log('Heartbeat', 'Sending heartbeat message');
            } else {
                message = input.value.trim();
                if (!message) return;
                
                this.updateActivity();
            }

            if (!this.chatManager.getCurrentChat()) {
                this.createNewChat();
            }

            if (!isHeartbeat) {
                this.elements.sendBtn.disabled = true;
                input.disabled = true;
            }

            try {
                if (!isHeartbeat) {
                    // Add user message immediately
                    this.chatManager.addMessage('user', message);
                    this.updateMessages();
                    input.value = '';
                    
                    // Create progress message element
                    this.currentStreamingMessage = this.createProgressMessage();
                    
                    // Initial status
                    this.updateStatus('Processing...', 'streaming');
                }
                
                // Get conversation history and existing conversation ID
                const conversationHistory = isHeartbeat ? [] : 
                    this.chatManager.getConversationHistory().slice(0, -1); // Exclude the message we just added
                const existingConversationId = isHeartbeat ? null : this.chatManager.getConversationId();
                
                let streamContent = '';
                let newConversationId = null;
                
                // Reset streaming parser for new message
                if (!isHeartbeat) {
                    this.streamingParser.reset();
                }
                
                const result = await this.apiManager.sendMessage(
                    message,
                    conversationHistory,
                    existingConversationId,
                    // onChunk
                    (chunk) => {
                        if (!isHeartbeat && this.currentStreamingMessage) {
                            // Process chunk through parser
                            const parseResult = this.streamingParser.processChunk(chunk);
                            
                            // Update display with parsed text (no raw tool uses)
                            streamContent += parseResult.displayText;
                            this.currentStreamingMessage.textContent = streamContent;
                            
                            // Add tool use indicators inline
                            parseResult.toolUses.forEach(toolUse => {
                                const indicator = this.createToolUseIndicator(toolUse.data);
                                this.currentStreamingMessage.appendChild(indicator);
                            });
                            
                            this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
                            this.updateStatus('Streaming response...', 'streaming');
                        }
                    },
                    // onComplete
                    async () => {
                        if (isHeartbeat) {
                            Logger.log('Heartbeat', 'Heartbeat completed successfully');
                        } else {
                            Logger.log('App', 'Streaming completed');
                            
                            // Remove streaming indicator
                            if (this.currentStreamingMessage) {
                                this.currentStreamingMessage.classList.remove('streaming');
                            }
                            
                            // Get all tool uses from the complete response
                            const toolUses = this.streamingParser.getToolUses();
                            
                            if (toolUses.length > 0) {
                                Logger.log('App', 'Executing tools', { count: toolUses.length });
                                this.updateStatus('Executing tools...', 'streaming');
                                
                                // Execute all tools
                                const toolResults = [];
                                for (const toolUse of toolUses) {
                                    try {
                                        const result = await this.toolManager.executeTool(toolUse.data);
                                        toolResults.push(result);
                                        
                                        // Create and add tool result bubble
                                        const resultBubble = this.createToolResultBubble(result);
                                        this.elements.messages.appendChild(resultBubble);
                                        this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
                                    } catch (error) {
                                        Logger.error('App', 'Tool execution failed', error);
                                        const errorBubble = this.createToolResultBubble({
                                            tool_type: toolUse.data.tool_type,
                                            error: error.message,
                                            results: []
                                        });
                                        this.elements.messages.appendChild(errorBubble);
                                    }
                                }
                                
                                this.updateStatus('Tools completed', 'success');
                                
                                // TODO: If tools were executed, continue conversation with tool results
                                // For now, just complete this turn
                            }
                            
                            // Save the complete response
                            const completeOutput = this.streamingParser.getCompleteOutput();
                            if (completeOutput) {
                                this.chatManager.addMessage('assistant', completeOutput);
                            }
                            
                            this.currentStreamingMessage = null;
                            this.updateStatus('Message completed', 'success');
                        }
                    },
                    // onError
                    (error) => {
                        if (!isHeartbeat) {
                            Logger.error('App', 'Streaming failed', error);
                            
                            // Remove streaming message on error
                            if (this.currentStreamingMessage) {
                                this.currentStreamingMessage.remove();
                                this.currentStreamingMessage = null;
                            }
                            
                            if (error.message.includes('Authentication') || error.message.includes('token')) {
                                this.updateStatus('Authentication error - Please refresh and log in', 'error');
                            } else {
                                this.updateStatus(`Error: ${error.message}`, 'error');
                            }
                        } else {
                            Logger.error('Heartbeat', 'Heartbeat failed', error);
                        }
                    },
                    // onProgress
                    !isHeartbeat ? (current, total, message) => {
                        if (current === null) {
                            // Replace progress message with streaming message
                            if (this.currentStreamingMessage && this.currentStreamingMessage.classList.contains('progress')) {
                                this.currentStreamingMessage.remove();
                                this.currentStreamingMessage = this.createStreamingMessage();
                            }
                            this.updateStatus('Streaming response...', 'streaming');
                        } else {
                            // Update progress bar and text
                            this.updateProgressMessage(message, current, total);
                            this.elements.messages.scrollTop = this.elements.messages.scrollHeight;
                        }
                    } : null
                );
                
                // Save conversation ID for new conversations (after await completes)
                if (!isHeartbeat && result && result.conversationId && !existingConversationId) {
                    this.chatManager.setConversationId(result.conversationId);
                    Logger.log('App', 'Saved new conversation ID', { 
                        conversationId: result.conversationId 
                    });
                }
                
            } catch (error) {
                if (!isHeartbeat) {
                    Logger.error('App', 'Send message failed', error);
                    this.updateStatus(`Error: ${error.message}`, 'error');
                }
            } finally {
                if (!isHeartbeat) {
                    this.elements.sendBtn.disabled = false;
                    input.disabled = false;
                    this.elements.userInput.focus();
                }
            }
        }

        updateActivity() {
            this.lastActivityTime = Date.now();
        }

        startHeartbeat() {
            Logger.log('Heartbeat', 'Starting heartbeat system');
            
            if (this.heartbeatTimer) {
                clearInterval(this.heartbeatTimer);
            }
            
            this.heartbeatTimer = setInterval(() => {
                const timeSinceActivity = Date.now() - this.lastActivityTime;
                
                if (timeSinceActivity >= CONFIG.HEARTBEAT_INTERVAL) {
                    Logger.log('Heartbeat', 'Sending heartbeat to keep session alive');
                    this.sendMessage(true);
                    this.updateActivity();
                }
            }, 10000);
        }

        stopHeartbeat() {
            if (this.heartbeatTimer) {
                clearInterval(this.heartbeatTimer);
                this.heartbeatTimer = null;
            }
        }

        close() {
            this.apiManager.clearActivityTimeout();
            this.stopHeartbeat();
            // Since we replaced the entire page, just reload to restore original
            Logger.log('App', 'Closing - reloading page to restore original interface');
            window.location.reload();
        }
    }

    // Initialize the streaming app
    Logger.log('Main', 'Loading Streaming AI Chat Overlay');
    const app = new StreamingChatApp();
    app.init();

    window.aiChatOverlayStreaming = app;

    Logger.log('Main', 'Streaming AI Chat Overlay loaded successfully');
    console.log('Streaming AI Chat Overlay loaded! Access via window.aiChatOverlayStreaming');

})();
