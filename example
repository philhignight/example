(function() {
    'use strict';

    // Configuration
    const CONFIG = {
        STORAGE_KEY: 'ai_chat_overlay_exact_data',
        RETRY_ATTEMPTS: 3,
        RETRY_DELAY: 2000,
        HEARTBEAT_INTERVAL: 60000, // 60 seconds
        HEARTBEAT_MESSAGE: 'respond "k"'
    };

    // Logging utility
    const Logger = {
        log: (category, message, data = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] ${message}`;
            console.log(logMessage, data || '');
        },
        error: (category, message, error = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] ERROR: ${message}`;
            console.error(logMessage, error || '');
        },
        warn: (category, message, data = null) => {
            const timestamp = new Date().toISOString();
            const logMessage = `[${timestamp}] [${category}] WARNING: ${message}`;
            console.warn(logMessage, data || '');
        }
    };

    // Exact Copy API Manager
    class ExactCopyAPIManager {
        constructor() {
            Logger.log('ExactAPI', 'Initializing Exact Copy API Manager');
            this.capturedRequest = null;
            this.isInitialized = false;
            this.originalFetch = null;
        }

        async initialize() {
            Logger.log('ExactAPI', 'Starting exact request capture process');
            
            // Override fetch to capture the exact request
            this.originalFetch = window.fetch;
            const self = this;
            
            window.fetch = async function(...args) {
                const url = args[0];
                const options = args[1] || {};
                
                // Check for target API call and capture it exactly
                if (typeof url === 'string' && url.includes('/api/v1/chats/new') && !self.isInitialized) {
                    Logger.log('ExactAPI', 'Capturing exact API request', { url });
                    
                    if (options.body) {
                        try {
                            const requestBody = JSON.parse(options.body);
                            
                            // Capture the EXACT request - no modifications
                            self.capturedRequest = {
                                url: url,
                                method: options.method || 'POST',
                                headers: self.extractHeaders(options.headers),
                                originalPayload: requestBody,
                                originalMessage: self.extractMessageContent(requestBody)
                            };
                            
                            self.isInitialized = true;
                            Logger.log('ExactAPI', 'Exact request captured successfully', {
                                originalMessage: self.capturedRequest.originalMessage
                            });
                            
                        } catch (e) {
                            Logger.error('ExactAPI', 'Failed to capture exact request', e);
                        }
                    }
                }
                
                // Let original request proceed
                return self.originalFetch.apply(this, args);
            };
            
            // Send dummy message to trigger request capture
            await this.sendDummyMessage();
            
            // Wait for request to be captured
            let attempts = 0;
            while (!this.isInitialized && attempts < 50) {
                await new Promise(resolve => setTimeout(resolve, 100));
                attempts++;
            }
            
            if (this.isInitialized) {
                Logger.log('ExactAPI', 'Exact request capture complete');
                return true;
            } else {
                Logger.error('ExactAPI', 'Failed to capture exact request');
                return false;
            }
        }

        extractHeaders(headers) {
            const result = {};
            if (headers) {
                if (headers instanceof Headers) {
                    for (let [key, value] of headers.entries()) {
                        result[key] = value;
                    }
                } else if (typeof headers === 'object') {
                    Object.assign(result, headers);
                }
            }
            return result;
        }

        extractMessageContent(payload) {
            // Find the user message content in the payload
            if (payload.chat && payload.chat.messages) {
                for (const msg of payload.chat.messages) {
                    if (msg.role === 'user') {
                        return msg.content;
                    }
                }
            }
            return null;
        }

        replaceMessageContent(payload, newMessage) {
            // Create exact copy and replace only the message content
            const exactCopy = JSON.parse(JSON.stringify(payload));
            
            // Replace in messages array
            if (exactCopy.chat && exactCopy.chat.messages) {
                exactCopy.chat.messages.forEach(msg => {
                    if (msg.role === 'user' && msg.content === this.capturedRequest.originalMessage) {
                        msg.content = newMessage;
                    }
                });
            }
            
            // Replace in history
            if (exactCopy.chat && exactCopy.chat.history && exactCopy.chat.history.messages) {
                Object.values(exactCopy.chat.history.messages).forEach(msg => {
                    if (msg.role === 'user' && msg.content === this.capturedRequest.originalMessage) {
                        msg.content = newMessage;
                    }
                });
            }
            
            return exactCopy;
        }

        async sendDummyMessage() {
            Logger.log('ExactAPI', 'Sending dummy message to capture exact request');
            
            try {
                // Wait for new chat button and click it
                const newChatBtn = await this.waitForElement('#new-chat-button');
                newChatBtn.click();
                
                // Wait for input and send dummy message
                const chatInput = await this.waitForElement('#chat-input');
                chatInput.textContent = 'capture_exact';
                
                // Click submit
                const submitBtn = await this.waitForElement('#submit-prompt-btn');
                submitBtn.click();
                
                Logger.log('ExactAPI', 'Dummy message sent for exact capture');
                
            } catch (error) {
                Logger.error('ExactAPI', 'Failed to send dummy message', error);
            }
        }

        async waitForElement(selector, timeout = 30000) {
            Logger.log('ExactAPI', `Waiting for element: ${selector}`, { timeoutMs: timeout });
            
            return new Promise((resolve, reject) => {
                const startTime = Date.now();
                let attempts = 0;
                
                const checkElement = () => {
                    attempts++;
                    const element = document.querySelector(selector);
                    const elapsed = Date.now() - startTime;
                    
                    if (element) {
                        Logger.log('ExactAPI', `Element found: ${selector}`, { 
                            attempts, 
                            elapsedMs: elapsed
                        });
                        resolve(element);
                        return;
                    }
                    
                    if (elapsed >= timeout) {
                        Logger.error('ExactAPI', `Timeout waiting for element: ${selector}`, {
                            attempts,
                            elapsedMs: elapsed
                        });
                        reject(new Error(`Timeout waiting for element: ${selector}`));
                        return;
                    }
                    
                    setTimeout(checkElement, 100);
                };
                
                checkElement();
            });
        }

        async sendMessage(userMessage) {
            if (!this.isInitialized) {
                Logger.error('ExactAPI', 'Exact request not captured yet');
                return null;
            }
            
            Logger.log('ExactAPI', 'Sending message with exact copy method', { 
                userMessage: userMessage.substring(0, 50) + '...'
            });
            
            try {
                // Create exact copy with only message content replaced
                const exactPayload = this.replaceMessageContent(
                    this.capturedRequest.originalPayload, 
                    userMessage
                );
                
                Logger.log('ExactAPI', 'Exact payload created', {
                    originalMessage: this.capturedRequest.originalMessage,
                    newMessage: userMessage
                });
                
                // Send with exact same headers and URL
                const response = await this.originalFetch(this.capturedRequest.url, {
                    method: this.capturedRequest.method,
                    headers: this.capturedRequest.headers,
                    body: JSON.stringify(exactPayload)
                });
                
                Logger.log('ExactAPI', 'Exact copy API response received', { 
                    status: response.status 
                });
                
                const responseData = await response.json();
                Logger.log('ExactAPI', 'Message sent successfully with exact copy', responseData);
                
                return responseData;
                
            } catch (error) {
                Logger.error('ExactAPI', 'Failed to send message with exact copy', error);
                return null;
            }
        }
    }

    // Chat Management (simplified)
    class ChatManager {
        constructor() {
            Logger.log('ChatManager', 'Initializing ChatManager');
            this.data = this.loadData();
        }

        loadData() {
            try {
                const stored = localStorage.getItem(CONFIG.STORAGE_KEY);
                return stored ? JSON.parse(stored) : { chats: [], currentChatId: null };
            } catch (e) {
                Logger.error('ChatManager', 'Failed to load chat data', e);
                return { chats: [], currentChatId: null };
            }
        }

        saveData() {
            try {
                localStorage.setItem(CONFIG.STORAGE_KEY, JSON.stringify(this.data));
            } catch (e) {
                Logger.error('ChatManager', 'Failed to save chat data', e);
            }
        }

        createNewChat() {
            const chatId = Date.now().toString();
            const chat = {
                id: chatId,
                timestamp: new Date().toLocaleString(),
                messages: []
            };
            this.data.chats.unshift(chat);
            this.data.currentChatId = chatId;
            this.saveData();
            Logger.log('ChatManager', 'New chat created', { chatId });
            return chat;
        }

        getCurrentChat() {
            if (!this.data.currentChatId) return null;
            return this.data.chats.find(chat => chat.id === this.data.currentChatId);
        }

        selectChat(chatId) {
            this.data.currentChatId = chatId;
            this.saveData();
        }

        addMessage(role, content) {
            const chat = this.getCurrentChat();
            if (chat) {
                chat.messages.push({ role, content, timestamp: Date.now() });
                this.saveData();
                Logger.log('ChatManager', 'Message added', { role });
            }
        }
    }

    // UI Creation (same as before)
    function createExactCopyUI() {
        const existing = document.getElementById('ai-chat-overlay-exact');
        if (existing) existing.remove();

        const overlay = document.createElement('div');
        overlay.id = 'ai-chat-overlay-exact';
        overlay.innerHTML = `
            <div class="chat-container">
                <div class="chat-header">
                    <h1>AI Chat (Exact Copy Mode)</h1>
                    <div class="header-controls">
                        <button id="new-chat-exact" class="btn">New Chat</button>
                        <button id="close-overlay-exact" class="btn btn-danger">×</button>
                    </div>
                </div>
                
                <div class="chat-content">
                    <div class="sidebar">
                        <h3>Previous Chats</h3>
                        <div id="chat-list-exact" class="chat-list"></div>
                    </div>
                    
                    <div class="main-chat">
                        <div id="messages-exact" class="messages"></div>
                        <div class="input-area">
                            <textarea id="user-input-exact" placeholder="Type your message..." rows="3"></textarea>
                            <button id="send-btn-exact" class="btn btn-primary">Send</button>
                        </div>
                        <div id="status-exact" class="status">Capturing exact API request...</div>
                    </div>
                </div>
            </div>
        `;

        // Add same CSS styling
        const style = document.createElement('style');
        style.textContent = `
            #ai-chat-overlay-exact {
                position: fixed;
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background: #1a1a1a;
                color: #e0e0e0;
                font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
                font-size: 14px;
                z-index: 9999;
                display: flex;
                flex-direction: column;
            }

            .chat-container {
                display: flex;
                flex-direction: column;
                height: 100%;
                max-width: 100%;
            }

            .chat-header {
                background: #2d2d2d;
                padding: 15px 20px;
                border-bottom: 1px solid #444;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .chat-header h1 {
                margin: 0;
                font-size: 18px;
                font-weight: normal;
            }

            .header-controls {
                display: flex;
                gap: 10px;
            }

            .chat-content {
                display: flex;
                flex: 1;
                overflow: hidden;
            }

            .sidebar {
                width: 250px;
                background: #252525;
                border-right: 1px solid #444;
                padding: 15px;
                overflow-y: auto;
            }

            .sidebar h3 {
                margin: 0 0 15px 0;
                font-size: 14px;
                font-weight: normal;
                color: #ccc;
            }

            .chat-list {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }

            .chat-item {
                padding: 8px 12px;
                background: #333;
                border: 1px solid #444;
                border-radius: 4px;
                cursor: pointer;
                font-size: 12px;
                transition: background-color 0.2s;
            }

            .chat-item:hover {
                background: #3a3a3a;
            }

            .chat-item.active {
                background: #0d7377;
                border-color: #14a085;
            }

            .main-chat {
                flex: 1;
                display: flex;
                flex-direction: column;
                overflow: hidden;
            }

            .messages {
                flex: 1;
                overflow-y: auto;
                padding: 20px;
                display: flex;
                flex-direction: column;
                gap: 15px;
            }

            .message {
                max-width: 80%;
                padding: 12px 16px;
                border-radius: 8px;
                white-space: pre-wrap;
                word-wrap: break-word;
            }

            .message.user {
                align-self: flex-end;
                background: #0d7377;
                border: 1px solid #14a085;
            }

            .message.assistant {
                align-self: flex-start;
                background: #2d2d2d;
                border: 1px solid #444;
            }

            .input-area {
                padding: 15px 20px;
                background: #2d2d2d;
                border-top: 1px solid #444;
                display: flex;
                gap: 10px;
                align-items: flex-end;
            }

            #user-input-exact {
                flex: 1;
                background: #1a1a1a;
                border: 1px solid #444;
                border-radius: 4px;
                color: #e0e0e0;
                padding: 10px;
                font-family: inherit;
                font-size: inherit;
                resize: vertical;
                min-height: 60px;
            }

            #user-input-exact:focus {
                outline: none;
                border-color: #0d7377;
            }

            .btn {
                background: #333;
                border: 1px solid #444;
                color: #e0e0e0;
                padding: 8px 16px;
                border-radius: 4px;
                cursor: pointer;
                font-family: inherit;
                font-size: inherit;
                transition: background-color 0.2s;
            }

            .btn:hover {
                background: #3a3a3a;
            }

            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .btn-primary {
                background: #0d7377;
                border-color: #14a085;
                height: fit-content;
            }

            .btn-primary:hover:not(:disabled) {
                background: #0a5d61;
            }

            .btn-danger {
                background: #d32f2f;
                border-color: #f44336;
            }

            .btn-danger:hover {
                background: #b71c1c;
            }

            .status {
                padding: 10px 20px;
                background: #2d2d2d;
                border-top: 1px solid #444;
                font-size: 12px;
                color: #aaa;
                min-height: 20px;
            }

            .status.processing {
                color: #ffa726;
            }

            .status.error {
                color: #f44336;
            }

            .status.success {
                color: #4caf50;
            }

            .status.ready {
                color: #4caf50;
            }
        `;

        document.head.appendChild(style);
        document.body.appendChild(overlay);

        return overlay;
    }

    // Main App
    class ExactCopyChatApp {
        constructor() {
            Logger.log('App', 'Initializing Exact Copy Chat App');
            this.apiManager = new ExactCopyAPIManager();
            this.chatManager = new ChatManager();
            this.overlay = null;
            this.elements = {};
            this.lastActivityTime = Date.now();
            this.heartbeatTimer = null;
        }

        async init() {
            Logger.log('App', 'Starting initialization');
            
            // Create UI
            this.overlay = createExactCopyUI();
            this.bindElements();
            this.bindEvents();
            
            // Initialize exact copy capture
            this.updateStatus('Capturing exact API request...', 'processing');
            const success = await this.apiManager.initialize();
            
            if (success) {
                this.updateStatus('Ready - Exact request captured', 'ready');
                this.updateUI();
                this.startHeartbeat();
                Logger.log('App', 'Initialization complete');
            } else {
                this.updateStatus('Failed to capture exact request', 'error');
                Logger.error('App', 'Initialization failed');
            }
        }

        bindElements() {
            this.elements = {
                newChatBtn: document.getElementById('new-chat-exact'),
                closeBtn: document.getElementById('close-overlay-exact'),
                chatList: document.getElementById('chat-list-exact'),
                messages: document.getElementById('messages-exact'),
                userInput: document.getElementById('user-input-exact'),
                sendBtn: document.getElementById('send-btn-exact'),
                status: document.getElementById('status-exact')
            };
        }

        bindEvents() {
            this.elements.newChatBtn.addEventListener('click', () => {
                this.createNewChat();
            });

            this.elements.closeBtn.addEventListener('click', () => {
                this.close();
            });

            this.elements.sendBtn.addEventListener('click', () => {
                this.sendMessage();
            });

            this.elements.userInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }

        createNewChat() {
            this.chatManager.createNewChat();
            this.updateUI();
            this.elements.userInput.focus();
        }

        selectChat(chatId) {
            this.chatManager.selectChat(chatId);
            this.updateUI();
        }

        updateUI() {
            this.updateChatList();
            this.updateMessages();
        }

        updateChatList() {
            const chatList = this.elements.chatList;
            chatList.innerHTML = '';

            this.chatManager.data.chats.forEach(chat => {
                const item = document.createElement('div');
                item.className = 'chat-item';
                if (chat.id === this.chatManager.data.currentChatId) {
                    item.classList.add('active');
                }
                
                item.textContent = chat.timestamp;
                item.addEventListener('click', () => {
                    this.selectChat(chat.id);
                });
                
                chatList.appendChild(item);
            });
        }

        updateMessages() {
            const messages = this.elements.messages;
            messages.innerHTML = '';

            const currentChat = this.chatManager.getCurrentChat();
            if (!currentChat) return;

            currentChat.messages.forEach((msg) => {
                const messageEl = document.createElement('div');
                messageEl.className = `message ${msg.role}`;
                messageEl.textContent = msg.content;
                messages.appendChild(messageEl);
            });

            messages.scrollTop = messages.scrollHeight;
        }

        updateStatus(text, type = '') {
            this.elements.status.textContent = text;
            this.elements.status.className = `status ${type}`;
        }

        async sendMessage(isHeartbeat = false) {
            const input = this.elements.userInput;
            let message;
            
            if (isHeartbeat) {
                message = CONFIG.HEARTBEAT_MESSAGE;
                Logger.log('Heartbeat', 'Sending heartbeat message');
            } else {
                message = input.value.trim();
                if (!message) return;
                
                this.updateActivity();
            }

            if (!this.chatManager.getCurrentChat()) {
                this.createNewChat();
            }

            if (!isHeartbeat) {
                this.elements.sendBtn.disabled = true;
                input.disabled = true;
            }

            try {
                if (!isHeartbeat) {
                    this.chatManager.addMessage('user', message);
                    this.updateMessages();
                    input.value = '';
                    this.updateStatus('Sending message via exact copy...', 'processing');
                }
                
                const response = await this.apiManager.sendMessage(message);
                
                if (response) {
                    if (isHeartbeat) {
                        Logger.log('Heartbeat', 'Heartbeat sent successfully');
                    } else {
                        this.chatManager.addMessage('assistant', 'Message sent successfully via exact copy');
                        this.updateMessages();
                        this.updateStatus('Message sent successfully', 'success');
                    }
                } else {
                    if (!isHeartbeat) {
                        this.updateStatus('Failed to send message', 'error');
                    }
                }
                
            } catch (error) {
                if (!isHeartbeat) {
                    Logger.error('App', 'Failed to send message', error);
                    this.updateStatus(`Error: ${error.message}`, 'error');
                }
            } finally {
                if (!isHeartbeat) {
                    this.elements.sendBtn.disabled = false;
                    input.disabled = false;
                    this.elements.userInput.focus();
                }
            }
        }

        updateActivity() {
            this.lastActivityTime = Date.now();
        }

        startHeartbeat() {
            if (this.heartbeatTimer) {
                clearInterval(this.heartbeatTimer);
            }
            
            this.heartbeatTimer = setInterval(() => {
                const timeSinceActivity = Date.now() - this.lastActivityTime;
                
                if (timeSinceActivity >= CONFIG.HEARTBEAT_INTERVAL) {
                    this.sendMessage(true);
                    this.updateActivity();
                }
            }, 10000);
        }

        stopHeartbeat() {
            if (this.heartbeatTimer) {
                clearInterval(this.heartbeatTimer);
                this.heartbeatTimer = null;
            }
        }

        close() {
            this.stopHeartbeat();
            if (this.overlay) {
                this.overlay.remove();
            }
        }
    }

    // Initialize the exact copy app
    Logger.log('Main', 'Loading Exact Copy AI Chat Overlay');
    const app = new ExactCopyChatApp();
    app.init();

    window.aiChatOverlayExact = app;

    Logger.log('Main', 'Exact Copy AI Chat Overlay loaded successfully');
    console.log('Exact Copy AI Chat Overlay loaded! Access via window.aiChatOverlayExact');

})();
